<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${__property(BEARER)}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">tenantId</stringProp>
            <stringProp name="Header.value">${tenantId}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">2FA-Token</stringProp>
            <stringProp name="Header.value">${MFATOKEN}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="thread_count" elementType="Argument">
            <stringProp name="Argument.name">thread_count</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ramp_up_period" elementType="Argument">
            <stringProp name="Argument.name">ramp_up_period</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lineNumber" elementType="Argument">
            <stringProp name="Argument.name">lineNumber</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accruals" elementType="Argument">
            <stringProp name="Argument.name">accruals</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="internal_credit_card_id" elementType="Argument">
            <stringProp name="Argument.name">internal_credit_card_id</stringProp>
            <stringProp name="Argument.value">internal_credit_card_id ${__property(internal_credit_card_id,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="preIPRunningBalance" elementType="Argument">
            <stringProp name="Argument.name">preIPRunningBalance</stringProp>
            <stringProp name="Argument.value">preIPRunningBalance ${__property(preIPRunningBalance)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="postIPRunningBalance" elementType="Argument">
            <stringProp name="Argument.name">postIPRunningBalance</stringProp>
            <stringProp name="Argument.value">postIPRunningBalance ${__property(postIPRunningBalance)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csvfile" elementType="Argument">
            <stringProp name="Argument.name">csvfile</stringProp>
            <stringProp name="Argument.value">csvfile ${__property(csvfile,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="statementDay" elementType="Argument">
            <stringProp name="Argument.name">statementDay</stringProp>
            <stringProp name="Argument.value">statementDay ${__property(statementDay)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nominalPurchaseInterestRate" elementType="Argument">
            <stringProp name="Argument.name">nominalPurchaseInterestRate</stringProp>
            <stringProp name="Argument.value">nominalPurchaseInterestRate ${__property(nominalPurchaseInterestRate)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nominalCashAdvanceInterestRate" elementType="Argument">
            <stringProp name="Argument.name">nominalCashAdvanceInterestRate</stringProp>
            <stringProp name="Argument.value">statemenominalCashAdvanceInterestRatentDay ${__property(nominalCashAdvanceInterestRate)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="creditAccountId" elementType="Argument">
            <stringProp name="Argument.name">creditAccountId</stringProp>
            <stringProp name="Argument.value">creditAccountId ${__property(creditAccountId)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="internal_saving_account_id" elementType="Argument">
            <stringProp name="Argument.name">internal_saving_account_id</stringProp>
            <stringProp name="Argument.value">internal_saving_account_id ${__property(internal_saving_account_id,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="properties" elementType="Argument">
            <stringProp name="Argument.name">properties</stringProp>
            <stringProp name="Argument.value">C:/Users/vinod/OneDrive/Desktop/VRamesh/jmeter-api-testing/in/Stage.properties</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientEnvironment" elementType="Argument">
            <stringProp name="Argument.name">clientEnvironment</stringProp>
            <stringProp name="Argument.value">MbanqStage</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
        <stringProp name="filename">C:/Users/vinod/OneDrive/Desktop/jmeter files/Creditcardfees/CreditCard_fee_Transactions.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames"></stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="shareMode">Thread Group</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Transactions Posting - Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">5</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler to loadProperties setTimzone generateLinenumber" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.util.Properties;
import java.io.FileInputStream;
import java.util.TimeZone;

// Set timezone
TimeZone.setDefault(TimeZone.getTimeZone(&quot;America/New_York&quot;))

// Generate line number to identify the CSV data
def lineNumber = Integer.parseInt(vars.get(&quot;lineNumber&quot;))
lineNumber++
vars.put(&quot;lineNumber&quot;, lineNumber.toString())
log.info(&quot;CSV Line Number: $lineNumber&quot;)

// Path to your .properties file
String filePath = &quot;${properties}&quot;;

// Load properties file
Properties props = new Properties();
try {
    FileInputStream fis = new FileInputStream(filePath);
    props.load(fis);
    fis.close();
} catch (Exception e) {
    log.error(&quot;Error loading properties file: &quot; + e);
}

// Create a new Properties object to store JMeter properties
Properties jmeterProps = new Properties();

// Iterate through each property and store it as a JMeter property
props.forEach { key, value -&gt;
    // Remove specific text from the property key before converting to string
    String newKeyString = key.toString().replaceAll(&quot;${clientEnvironment}&quot;, &quot;&quot;);
    
    // Convert property value to string after replacements
    String valueString = value.toString();

    // Store the property as a JMeter property
    jmeterProps.put(newKeyString, valueString);

    // Print the modified key-value pair
//    log.info(&quot;Modified property: $newKeyString=$valueString&quot;);
}

// Set the new Properties object as JMeter properties
jmeterProps.forEach { key, value -&gt;
    vars.put(key.toString(), value.toString());
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Get Access Token" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${lineNumber} - Get Access Token" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">oauth/token?</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${grant_type}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="client_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${client_secret}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_secret</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${client_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">${__setProperty(BEARER, ${BEARER})};</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">BEARER</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${lineNumber} - Get MFA status" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/authenticationdetail</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get MFA status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mfa_Status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.isMFARequired</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If MFA is required" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${mfa_Status}&quot;==&quot;true&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${lineNumber} - Get MFA code" enabled="true">
              <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/v1/otp/mock</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;deliveryMethod&quot;: &quot;EMAIL&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get MFA code" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">otpToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.otpToken</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${lineNumber} - Get MFA token" enabled="true">
              <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/v1/mfa/requesttoken</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;token&quot;: &quot;${otpToken}&quot;,&#xd;
	&quot;deliveryMethod&quot;: &quot;EMAIL&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get MFA code" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">MFATOKEN</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${accountCreation}&quot;==&quot;yes&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate credit  product" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/creditproducts/${creditProduct}?template=true</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor To extract statementDay" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">statementDay</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.statementDay</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor To extract nominalCashAdvanceInterestRate" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">nominalCashAdvanceInterestRate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.nominalCashAdvanceInterestRate</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor To extract nominalPurchaseInterestRate" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">nominalPurchaseInterestRate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.nominalAnnualInterestRate</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion to set statementDay as property" enabled="true">
              <stringProp name="BeanShellAssertion.query">${__setProperty(statementDay, ${statementDay})};
${__setProperty(nominalCashAdvanceInterestRate, ${nominalCashAdvanceInterestRate})};
${__setProperty(nominalPurchaseInterestRate, ${nominalPurchaseInterestRate})};
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller - To create credit card &amp; savings account" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate date mask" enabled="true">
              <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">v1/configdrivendate?command=SET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;dateContext&quot;: &quot;system&quot;,&#xd;
    &quot;contextYear&quot;: ${year},&#xd;
    &quot;contextMonth&quot;: ${month},&#xd;
    &quot;contextDay&quot;: ${day}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ControllerSavings Account Creation" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&quot;${SavingsAccountCreation}&quot;==&quot;yes&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate create saving account" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/savingsaccounts</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;productId&quot;: ${savingsProductId},&#xd;
    &quot;nominalAnnualInterestRate&quot;: &quot;0&quot;,&#xd;
    &quot;minRequiredOpeningBalance&quot;: &quot;10000&quot;,&#xd;
    &quot;withdrawalFeeForTransfers&quot;: false,&#xd;
    &quot;allowOverdraft&quot;: false,&#xd;
    &quot;enforceMinRequiredBalance&quot;: false,&#xd;
    &quot;minRequiredBalance&quot;: &quot;100&quot;,&#xd;
    &quot;withHoldTax&quot;: false,&#xd;
    &quot;interestCompoundingPeriodType&quot;: 1,&#xd;
    &quot;interestPostingPeriodType&quot;: 4,&#xd;
    &quot;interestCalculationType&quot;: 1,&#xd;
    &quot;interestCalculationDaysInYearType&quot;: 365,&#xd;
    &quot;submittedOnDate&quot;: &quot;${savingsAccountCreationDate}&quot;,&#xd;
    &quot;locale&quot;: &quot;en&quot;,&#xd;
    &quot;dateFormat&quot;: &quot;dd MMMM yyyy&quot;,&#xd;
    &quot;monthDayFormat&quot;: &quot;dd MMM&quot;,&#xd;
    &quot;charges&quot;: [],&#xd;
    &quot;clientId&quot;: &quot;${clientId}&quot;&#xd;
  }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor To extract internal_saving_account_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">internal_saving_account_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.savingsId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate approve saving account" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/savingsaccounts/${internal_saving_account_id}?command=approve</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;approvedOnDate&quot;:&quot;${savingsAccountCreationDate}&quot;,&#xd;
	&quot;locale&quot;:&quot;en&quot;,&#xd;
	&quot;dateFormat&quot;:&quot;dd MMMM yyyy&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate activate saving account" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/savingsaccounts/${internal_saving_account_id}?command=activate</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;activatedOnDate&quot;:&quot;${savingsAccountCreationDate}&quot;,&#xd;
	&quot;locale&quot;:&quot;en&quot;,&#xd;
	&quot;dateFormat&quot;:&quot;dd MMMM yyyy&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">clientId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">${__setProperty(clientId, ${clientId})};
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Credit Card Account Creation" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&quot;${creditCardAccountCreation}&quot;==&quot;yes&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Credit Card account" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/creditcards</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;cardProductId&quot;: ${creditCardProductId},&#xd;
    &quot;nominalAnnualInterestRate&quot;: ${nominalPurchaseInterestRate},&#xd;
    &quot;nominalCashAdvanceInterestRate&quot;: ${nominalCashAdvanceInterestRate},&#xd;
    &quot;nominalAnnualPenaltyInterestRate&quot;: 8,&#xd;
    &quot;interestCompoundingPeriodType&quot;: 1,&#xd;
    &quot;interestPostingPeriodType&quot;: 4,&#xd;
    &quot;interestCalculationType&quot;: 2,&#xd;
    &quot;interestCalculationDaysInYearType&quot;: 365,&#xd;
    &quot;creditLimit&quot;: &quot;20000&quot;,&#xd;
    &quot;cashLimit&quot;: &quot;0&quot;,&#xd;
    &quot;submittedOnDate&quot;: &quot;${creditCardCreationDate}&quot;,&#xd;
    &quot;locale&quot;: &quot;en&quot;,&#xd;
    &quot;dateFormat&quot;: &quot;dd MMMM yyyy&quot;,&#xd;
    &quot;clientId&quot;: &quot;${clientId}&quot;&#xd;
  }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">internal_credit_card_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.resourceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">${__setProperty(internal_credit_card_id, ${internal_credit_card_id})};


log.info(&quot;cardToken - ${cardToken}&quot;);

import org.apache.jmeter.assertions.AssertionResult;
import org.apache.jmeter.samplers.SampleResult;

// Get the response code
String responseCode = SampleResult.getResponseCode();

// Define the expected response code
String expectedResponseCode = &quot;200&quot;;

// Flag to track if the expected condition is met
boolean conditionMet = false;

// Verify the response code
if (responseCode.equals(expectedResponseCode)) {
	conditionMet = true;
    log.info(&quot;Credit Card account created successfully. Response code matches. Expected: &quot; + expectedResponseCode + &quot;, Actual: &quot; + responseCode);
    props.put(&quot;creditCardAccountCreation&quot;, &quot;successful&quot;);
    //log.info(&quot;${clientEnvironment}-NewDataCreationPassed&quot;);
}else{
	conditionMet = false;
     props.put(&quot;creditCardAccountCreation&quot;, &quot;unsuccessful&quot;);
     log.info(&quot;${clientEnvironment}-NewDataCreationFailed&quot;);
}

// Set the assertion result based on the condition
prev.setSuccessful(conditionMet);</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Approve Credit Card account" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/creditcards/${internal_credit_card_id}?command=approve</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;approvedOnDate&quot;: &quot;${creditCardCreationDate}&quot;,&#xd;
    &quot;locale&quot;: &quot;en&quot;,&#xd;
    &quot;dateFormat&quot;: &quot;dd MMMM yyyy&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">subResourceId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.subResourceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">${__setProperty(subResourceId, ${subResourceId})};
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate card details" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/creditcards/${internal_credit_card_id}?associations=account</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">creditAccountId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.creditAccountId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">cardToken</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.cardToken</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">${__setProperty(creditAccountId, ${creditAccountId})};
${__setProperty(cardToken, ${cardToken})};
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Standing instruction Creation" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${CreateStandingInstruction}&quot;==&quot;yes&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create standing instructions for credit card account" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/standinginstructions</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;fromAccountNumber&quot;: &quot;6252526223&quot;,&#xd;
    &quot;fromAccountRoutingNumber&quot;: &quot;321070007&quot;,&#xd;
    &quot;toOfficeId&quot;: &quot;1&quot;,&#xd;
    //&quot;amount&quot;: 1000.0, //optional when instruction type is 3 and 4&#xd;
    &quot;toAccountType&quot;: &quot;3&quot;,&#xd;
    &quot;isAccountExternal&quot;: true,&#xd;
    &quot;dateFormat&quot;: &quot;yyyy-MM-dd&quot;,&#xd;
    &quot;validFrom&quot; : &quot;2020-01-01&quot;,&#xd;
    &quot;toAccountId&quot;: ${subResourceId}, /// 1st change CREDIT ACCOUNT ID&#xd;
    &quot;fromClientId&quot;: 11008,&#xd;
    &quot;locale&quot;: &quot;en_GB&quot;,&#xd;
    &quot;priority&quot;: &quot;1&quot;,&#xd;
    &quot;fromAccountType&quot;: &quot;2&quot;,&#xd;
    &quot;fromExternalAccountType&quot;: &quot;SAVINGS&quot;,&#xd;
    &quot;toClientId&quot;: ${clientId},///2nd change-Place clientid&#xd;
    &quot;instructionType&quot;: &quot;${instructionType}&quot;, // 1 is for fixed amount configuration //MIN_DUE(3, &quot;standingInstructionType.min.due&quot;), STATEMENT_BALANCE(4, &quot;standingInstructionType.statement.balance&quot;);&#xd;
    //&quot;fromAccountId&quot;: 11294,&#xd;
    &quot;fromOfficeId&quot;: &quot;1&quot;,&#xd;
    &quot;name&quot;: &quot;Vinod-Autodebit-${__time(ddMMMyyyyHHmmss,name)}&quot;,&#xd;
    &quot;transferType&quot;: &quot;5&quot;,&#xd;
    &quot;status&quot;: &quot;1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create standing instructions for credit card account from internal savings account (normal autopay)" enabled="false">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/standinginstructions</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;fromOfficeId&quot;: 1,&#xd;
  &quot;fromClientId&quot;: ${clientId},&#xd;
  &quot;fromAccountType&quot;: 2,&#xd;
  &quot;name&quot;: &quot;Vinod-Autopay-${__time(ddMMMyyyyHHmmss,name)}&quot;,&#xd;
  &quot;transferType&quot;: 5,&#xd;
  &quot;priority&quot;: 2,&#xd;
  &quot;status&quot;: 1,&#xd;
  &quot;fromAccountId&quot;: ${internal_saving_account_id},&#xd;
  &quot;toOfficeId&quot;: 1,&#xd;
  &quot;toClientId&quot;: ${clientId},&#xd;
  &quot;toAccountType&quot;: 3,&#xd;
  &quot;toAccountId&quot;: ${subResourceId},&#xd;
  &quot;instructionType&quot;: &quot;${instructionType}&quot;, // 1 is for fixed amount configuration //MIN_DUE(3, &quot;standingInstructionType.min.due&quot;), STATEMENT_BALANCE(4, &quot;standingInstructionType.statement.balance&quot;);&#xd;
  //&quot;amount&quot;: &quot;100&quot;,&#xd;
  //&quot;repaymentOnDay&quot;: &quot;24&quot;,&#xd;
  &quot;validFrom&quot;: &quot;01 January 2020&quot;,&#xd;
  &quot;recurrenceType&quot;: 2,&#xd;
  &quot;validTill&quot;: &quot;01 January 2035&quot;,&#xd;
  &quot;locale&quot;: &quot;en&quot;,&#xd;
  &quot;dateFormat&quot;: &quot;dd MMMM yyyy&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Standinginstruction_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.resourceId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">${__setProperty(Standinginstruction_id, ${Standinginstruction_id})};
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate system date mask" enabled="true">
          <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">v1/configdrivendate?command=SET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;dateContext&quot;: &quot;system&quot;,&#xd;
    &quot;contextYear&quot;: ${year},&#xd;
    &quot;contextMonth&quot;: ${month},&#xd;
    &quot;contextDay&quot;: ${day}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate credit card date mask" enabled="false">
          <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">v1/configdrivendate?command=SET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;dateContext&quot;: &quot;credit-card-common&quot;,&#xd;
    &quot;contextYear&quot;: ${year},&#xd;
    &quot;contextMonth&quot;: ${month},&#xd;
    &quot;contextDay&quot;: ${day}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller only Purcahse Transaction" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;purchase&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthId&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purchase Auth transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/creditcards/${cardToken}/authorization</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;authType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;internalId&quot;: &quot;#413101101234#10223#${AuthId}&quot;,&#xd;
    &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
    &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
    &quot;externalCardId&quot;: &quot;413101101234&quot;,&#xd;
    &quot;gatewayToken&quot;: &quot;GALILEO&quot;,&#xd;
    &quot;transactionType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;account&quot;: {&#xd;
        &quot;accountToken&quot;: &quot;413101101234&quot;,&#xd;
        &quot;cardToken&quot;: 10222&#xd;
    },&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;amount&quot;: ${amount},&#xd;
    &quot;amountDetails&quot;: {&#xd;
        &quot;cashBackAmount&quot;: 10,&#xd;
        &quot;exchangeRate&quot;: 61000000,&#xd;
        &quot;localCurrency&quot;: &quot;USD&quot;,&#xd;
        &quot;localCurrencyAmount&quot;: 18.39&#xd;
    },&#xd;
    &quot;isEcommerce&quot;: false,&#xd;
    &quot;transaction&quot;: {&#xd;
        &quot;entryType&quot;: &quot;EMV Fallback&quot;,&#xd;
        &quot;validationResults&quot;: {&#xd;
            &quot;aav&quot;: &quot;N&quot;,&#xd;
            &quot;arqc&quot;: &quot;N&quot;,&#xd;
            &quot;avsResult&quot;: &quot;B&quot;,&#xd;
            &quot;cvv1&quot;: &quot;Y&quot;,&#xd;
            &quot;cvv2&quot;: &quot;N&quot;,&#xd;
            &quot;cvv3&quot;: &quot;N&quot;,&#xd;
            &quot;offlinePin&quot;: &quot;N&quot;,&#xd;
            &quot;pin&quot;: &quot;Y&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;merchant&quot;: {&#xd;
        &quot;mcc&quot;: 1212,&#xd;
        &quot;merchantId&quot;: &quot;04400071712234 &quot;,&#xd;
        &quot;description&quot;: &quot;7-ELEVEN               SALT LAKE CIT  UT&quot;,&#xd;
        &quot;postalcode&quot;: &quot;84116-0000&quot;,&#xd;
        &quot;country&quot;: &quot;840&quot;&#xd;
    },&#xd;
    &quot;network&quot;: &quot;VISA&quot;,&#xd;
    &quot;expiryDate&quot;: &quot;2025-12-27&quot;,&#xd;
    &quot;returnBalance&quot;: false,&#xd;
    &quot;incremental&quot;: false,&#xd;
    &quot;executionCode&quot;: &quot;00&quot;,&#xd;
    &quot;executionMessage&quot;: &quot;Accepted authorization&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purchase Settlement transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/settlements</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;settlementRequestEntries&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
            &quot;externalCardId&quot;: &quot;#413101203250#${AuthId}&quot;,&#xd;
            &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
            &quot;mcSequenceNumber&quot;: &quot;0&quot;,&#xd;
            &quot;merchant&quot;: {&#xd;
                &quot;merchant_number&quot;: &quot;242661000053360&quot;,&#xd;
                &quot;merchantId&quot;: &quot;#413101203250#33264#${AuthId}&quot;,&#xd;
                &quot;merchant_location&quot;: &quot;840&quot;,&#xd;
                &quot;mcc&quot;: &quot;5999&quot;,&#xd;
                &quot;description&quot;: &quot;SQ *CHAMOY EXPRESS Rancho CucamoCAUS&quot;&#xd;
            },&#xd;
            &quot;internalClearingId&quot;: &quot;#413101203250#33264#${AuthId}#VISA&quot;,&#xd;
            &quot;type&quot;: &quot;DEBIT&quot;,&#xd;
            &quot;interchangeFeeAmount&quot;: &quot;0.13&quot;,&#xd;
            &quot;transactionCodeType&quot;: &quot;VISA&quot;,&#xd;
            &quot;cardToken&quot;: &quot;${cardToken}&quot;,&#xd;
            &quot;network&quot;: &quot;VISA&quot;,&#xd;
            &quot;mcSequenceCount&quot;: &quot;0&quot;,&#xd;
            &quot;externalClearingId&quot;: &quot;#35608#VISA&quot;,&#xd;
            &quot;currency&quot;: &quot;USD&quot;,&#xd;
            &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
            &quot;internalAuthId&quot;: &quot;#413101203250#33264#35608&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;batchDate&quot;: &quot;2022-02-15T16:33:16.911Z&quot;,&#xd;
    &quot;batchIdentifier&quot;: &quot;postedtransactions_20220203.txt.gpg&quot;,&#xd;
    &quot;tenantIdentifier&quot;: &quot;${tenantId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller only Cash Advance Transaction" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;cashAdvance&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthId&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cash_Advance Auth transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/creditcards/${cardToken}/authorization</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;authType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;internalId&quot;: &quot;#413101101234#10223#${AuthId}&quot;,&#xd;
    &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
    &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
    &quot;externalCardId&quot;: &quot;413101101234&quot;,&#xd;
    &quot;gatewayToken&quot;: &quot;GALILEO&quot;,&#xd;
    &quot;transactionType&quot;: &quot;CASH_ADVANCE&quot;,&#xd;
    &quot;account&quot;: {&#xd;
        &quot;accountToken&quot;: &quot;413101101234&quot;,&#xd;
        &quot;cardToken&quot;: 10222&#xd;
    },&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;amount&quot;: ${amount},&#xd;
    &quot;amountDetails&quot;: {&#xd;
        &quot;cashBackAmount&quot;: 10,&#xd;
        &quot;exchangeRate&quot;: 61000000,&#xd;
        &quot;localCurrency&quot;: &quot;USD&quot;,&#xd;
        &quot;localCurrencyAmount&quot;: 18.39&#xd;
    },&#xd;
    &quot;isEcommerce&quot;: false,&#xd;
    &quot;transaction&quot;: {&#xd;
        &quot;entryType&quot;: &quot;EMV Fallback&quot;,&#xd;
        &quot;validationResults&quot;: {&#xd;
            &quot;aav&quot;: &quot;N&quot;,&#xd;
            &quot;arqc&quot;: &quot;N&quot;,&#xd;
            &quot;avsResult&quot;: &quot;B&quot;,&#xd;
            &quot;cvv1&quot;: &quot;Y&quot;,&#xd;
            &quot;cvv2&quot;: &quot;N&quot;,&#xd;
            &quot;cvv3&quot;: &quot;N&quot;,&#xd;
            &quot;offlinePin&quot;: &quot;N&quot;,&#xd;
            &quot;pin&quot;: &quot;Y&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;merchant&quot;: {&#xd;
        &quot;mcc&quot;: 5541,&#xd;
        &quot;merchantId&quot;: &quot;04400071712234 &quot;,&#xd;
        &quot;description&quot;: &quot;7-ELEVEN               SALT LAKE CIT  UT&quot;,&#xd;
        &quot;postalcode&quot;: &quot;84116-0000&quot;,&#xd;
        &quot;country&quot;: &quot;840&quot;&#xd;
    },&#xd;
    &quot;network&quot;: &quot;VISA&quot;,&#xd;
    &quot;expiryDate&quot;: &quot;2025-12-27&quot;,&#xd;
    &quot;returnBalance&quot;: false,&#xd;
    &quot;incremental&quot;: false,&#xd;
    &quot;executionCode&quot;: &quot;00&quot;,&#xd;
    &quot;executionMessage&quot;: &quot;Accepted authorization&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cash_Advance Settlement transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/settlements</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;settlementRequestEntries&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
            &quot;externalCardId&quot;: &quot;#413101203250#${AuthId}&quot;,&#xd;
            &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
            &quot;mcSequenceNumber&quot;: &quot;0&quot;,&#xd;
            &quot;merchant&quot;: {&#xd;
                &quot;merchant_number&quot;: &quot;242661000053360&quot;,&#xd;
                &quot;merchantId&quot;: &quot;#413101203250#33264#${AuthId}&quot;,&#xd;
                &quot;merchant_location&quot;: &quot;840&quot;,&#xd;
                &quot;mcc&quot;: &quot;5999&quot;,&#xd;
                &quot;description&quot;: &quot;SQ *CHAMOY EXPRESS Rancho CucamoCAUS&quot;&#xd;
            },&#xd;
            &quot;internalClearingId&quot;: &quot;#413101203250#33264#${AuthId}#VISA&quot;,&#xd;
            &quot;type&quot;: &quot;DEBIT&quot;,&#xd;
            &quot;interchangeFeeAmount&quot;: &quot;0.13&quot;,&#xd;
            &quot;transactionCodeType&quot;: &quot;VISA&quot;,&#xd;
            &quot;cardToken&quot;: &quot;${cardToken}&quot;,&#xd;
            &quot;network&quot;: &quot;VISA&quot;,&#xd;
            &quot;mcSequenceCount&quot;: &quot;0&quot;,&#xd;
            &quot;externalClearingId&quot;: &quot;#35608#VISA&quot;,&#xd;
            &quot;currency&quot;: &quot;USD&quot;,&#xd;
            &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
            &quot;internalAuthId&quot;: &quot;#413101203250#33264#35608&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;batchDate&quot;: &quot;2022-02-15T16:33:16.911Z&quot;,&#xd;
    &quot;batchIdentifier&quot;: &quot;postedtransactions_20220203.txt.gpg&quot;,&#xd;
    &quot;tenantIdentifier&quot;: &quot;${tenantId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Payment Transaction" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;Payment&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate Payment transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/creditcards/${internal_credit_card_id}?command=makepayment</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
    &quot;currentAccountId&quot;: ${internal_saving_account_id},&#xd;
    &quot;locale&quot;: &quot;en&quot;,&#xd;
    &quot;dateFormat&quot;: &quot;dd MMMM yyyy&quot;&#xd;
  }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Merchant Credit Transaction" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;MerchantCredit&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthId&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purchase Auth transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/creditcards/${cardToken}/authorization</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;authType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;internalId&quot;: &quot;#413101101234#10223#${AuthId}&quot;,&#xd;
    &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
    &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
    &quot;externalCardId&quot;: &quot;413101101234&quot;,&#xd;
    &quot;gatewayToken&quot;: &quot;GALILEO&quot;,&#xd;
    &quot;transactionType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;account&quot;: {&#xd;
        &quot;accountToken&quot;: &quot;413101101234&quot;,&#xd;
        &quot;cardToken&quot;: 10222&#xd;
    },&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;amount&quot;: ${amount},&#xd;
    &quot;amountDetails&quot;: {&#xd;
        &quot;cashBackAmount&quot;: 10,&#xd;
        &quot;exchangeRate&quot;: 61000000,&#xd;
        &quot;localCurrency&quot;: &quot;USD&quot;,&#xd;
        &quot;localCurrencyAmount&quot;: 18.39&#xd;
    },&#xd;
    &quot;isEcommerce&quot;: false,&#xd;
    &quot;transaction&quot;: {&#xd;
        &quot;entryType&quot;: &quot;EMV Fallback&quot;,&#xd;
        &quot;validationResults&quot;: {&#xd;
            &quot;aav&quot;: &quot;N&quot;,&#xd;
            &quot;arqc&quot;: &quot;N&quot;,&#xd;
            &quot;avsResult&quot;: &quot;B&quot;,&#xd;
            &quot;cvv1&quot;: &quot;Y&quot;,&#xd;
            &quot;cvv2&quot;: &quot;N&quot;,&#xd;
            &quot;cvv3&quot;: &quot;N&quot;,&#xd;
            &quot;offlinePin&quot;: &quot;N&quot;,&#xd;
            &quot;pin&quot;: &quot;Y&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;merchant&quot;: {&#xd;
        &quot;mcc&quot;: 1212,&#xd;
        &quot;merchantId&quot;: &quot;04400071712234 &quot;,&#xd;
        &quot;description&quot;: &quot;7-ELEVEN               SALT LAKE CIT  UT&quot;,&#xd;
        &quot;postalcode&quot;: &quot;84116-0000&quot;,&#xd;
        &quot;country&quot;: &quot;840&quot;&#xd;
    },&#xd;
    &quot;network&quot;: &quot;VISA&quot;,&#xd;
    &quot;expiryDate&quot;: &quot;2025-12-27&quot;,&#xd;
    &quot;returnBalance&quot;: false,&#xd;
    &quot;incremental&quot;: false,&#xd;
    &quot;executionCode&quot;: &quot;00&quot;,&#xd;
    &quot;executionMessage&quot;: &quot;Accepted authorization&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Merchant Credit Settlement transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/settlements</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;settlementRequestEntries&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
            &quot;externalCardId&quot;: &quot;#413101203250#${AuthId}&quot;,&#xd;
            &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
            &quot;mcSequenceNumber&quot;: &quot;0&quot;,&#xd;
            &quot;merchant&quot;: {&#xd;
                &quot;merchant_number&quot;: &quot;242661000053360&quot;,&#xd;
                &quot;merchantId&quot;: &quot;#413101203250#33264#${AuthId}&quot;,&#xd;
                &quot;merchant_location&quot;: &quot;840&quot;,&#xd;
                &quot;mcc&quot;: &quot;5999&quot;,&#xd;
                &quot;description&quot;: &quot;SQ *CHAMOY EXPRESS Rancho CucamoCAUS&quot;&#xd;
            },&#xd;
            &quot;internalClearingId&quot;: &quot;#413101203250#33264#${AuthId}#VISA&quot;,&#xd;
            &quot;type&quot;: &quot;CREDIT&quot;,&#xd;
            &quot;interchangeFeeAmount&quot;: &quot;0.13&quot;,&#xd;
            &quot;transactionCodeType&quot;: &quot;ADJUSTMENT_CREDIT&quot;,&#xd;
            &quot;cardToken&quot;: &quot;${cardToken}&quot;,&#xd;
            &quot;network&quot;: &quot;VISA&quot;,&#xd;
            &quot;mcSequenceCount&quot;: &quot;0&quot;,&#xd;
            &quot;externalClearingId&quot;: &quot;#35608#VISA&quot;,&#xd;
            &quot;currency&quot;: &quot;USD&quot;,&#xd;
            &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
            &quot;internalAuthId&quot;: &quot;#413101203250#33264#35608&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;batchDate&quot;: &quot;2022-02-15T16:33:16.911Z&quot;,&#xd;
    &quot;batchIdentifier&quot;: &quot;postedtransactions_20220203.txt.gpg&quot;,&#xd;
    &quot;tenantIdentifier&quot;: &quot;${tenantId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller International  Purcahse Transaction" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;InternationalPOS&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthIdIN&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purchase International transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/creditcards/${cardToken}/authorization</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;authType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;internalId&quot;: &quot;#413101101234#10223#${AuthIdIN}&quot;,&#xd;
    &quot;externalAuthId&quot;: &quot;${AuthIdIN}&quot;,&#xd;
    &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
    &quot;externalCardId&quot;: &quot;413101101234&quot;,&#xd;
    &quot;gatewayToken&quot;: &quot;GALILEO&quot;,&#xd;
    &quot;transactionType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;account&quot;: {&#xd;
        &quot;accountToken&quot;: &quot;413101101234&quot;,&#xd;
        &quot;cardToken&quot;: 10222&#xd;
    },&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;amount&quot;: ${amount},&#xd;
    &quot;amountDetails&quot;: {&#xd;
        &quot;cashBackAmount&quot;: 10,&#xd;
        &quot;exchangeRate&quot;: 61000000,&#xd;
        &quot;localCurrency&quot;: &quot;USD&quot;,&#xd;
        &quot;localCurrencyAmount&quot;: 18.39&#xd;
    },&#xd;
    &quot;isEcommerce&quot;: false,&#xd;
    &quot;transaction&quot;: {&#xd;
        &quot;entryType&quot;: &quot;EMV Fallback&quot;,&#xd;
        &quot;validationResults&quot;: {&#xd;
            &quot;aav&quot;: &quot;N&quot;,&#xd;
            &quot;arqc&quot;: &quot;N&quot;,&#xd;
            &quot;avsResult&quot;: &quot;B&quot;,&#xd;
            &quot;cvv1&quot;: &quot;Y&quot;,&#xd;
            &quot;cvv2&quot;: &quot;N&quot;,&#xd;
            &quot;cvv3&quot;: &quot;N&quot;,&#xd;
            &quot;offlinePin&quot;: &quot;N&quot;,&#xd;
            &quot;pin&quot;: &quot;Y&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;merchant&quot;: {&#xd;
        &quot;mcc&quot;:    &quot;9353&quot;,&#xd;
        &quot;merchantId&quot;: &quot;04400071712234 &quot;,&#xd;
        &quot;description&quot;: &quot;7-ELEVEN               SALT LAKE CIT  UT&quot;,&#xd;
        &quot;postalcode&quot;: &quot;84116-0000&quot;,&#xd;
        &quot;country&quot;: &quot;840&quot;&#xd;
    },&#xd;
    &quot;network&quot;: &quot;VISA&quot;,&#xd;
    &quot;expiryDate&quot;: &quot;2025-12-27&quot;,&#xd;
    &quot;returnBalance&quot;: false,&#xd;
    &quot;incremental&quot;: false,&#xd;
    &quot;international&quot;: true,&#xd;
    &quot;executionCode&quot;: &quot;00&quot;,&#xd;
    &quot;executionMessage&quot;: &quot;Accepted authorization&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purchase International Settlement transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/settlements</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;settlementRequestEntries&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
            &quot;externalCardId&quot;: &quot;#413101203250#${AuthIdIN}&quot;,&#xd;
            &quot;externalAuthId&quot;: &quot;${AuthIdIN}&quot;,&#xd;
            &quot;mcSequenceNumber&quot;: &quot;0&quot;,&#xd;
            &quot;merchant&quot;: {&#xd;
                &quot;merchant_number&quot;: &quot;242661000053360&quot;,&#xd;
                &quot;merchantId&quot;: &quot;#413101203250#33264#${AuthIdIN}&quot;,&#xd;
                &quot;merchant_location&quot;: &quot;840&quot;,&#xd;
                &quot;mcc&quot;: &quot;6258&quot;,&#xd;
                &quot;description&quot;: &quot;SQ *CHAMOY EXPRESS Rancho CucamoCAUS&quot;&#xd;
            },&#xd;
            &quot;internalClearingId&quot;: &quot;#413101203250#33264#${AuthIdIN}#VISA&quot;,&#xd;
            &quot;type&quot;: &quot;DEBIT&quot;,   &#xd;
            &quot;interchangeFeeAmount&quot;: &quot;0.13&quot;,&#xd;
            &quot;transactionCodeType&quot;: &quot;VISA&quot;,&#xd;
            &quot;cardToken&quot;: &quot;${cardToken}&quot;,&#xd;
            &quot;network&quot;: &quot;VISA&quot;,&#xd;
            &quot;mcSequenceCount&quot;: &quot;0&quot;,&#xd;
            &quot;externalClearingId&quot;: &quot;#35608#VISA&quot;,&#xd;
            &quot;currency&quot;: &quot;USD&quot;,&#xd;
            &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
            &quot;international&quot;:true,&#xd;
            &quot;internalAuthId&quot;: &quot;#413101203250#33264#35608&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;batchDate&quot;: &quot;2022-02-15T16:33:16.911Z&quot;,&#xd;
    &quot;batchIdentifier&quot;: &quot;postedtransactions_20220203.txt.gpg&quot;,&#xd;
    &quot;tenantIdentifier&quot;:&quot;${tenantId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller settlement return credit Transaction" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;Settlementcredit&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthId&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purchase Settlement transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/settlements</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;settlementRequestEntries&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
            &quot;externalCardId&quot;: &quot;#413101203250#${AuthId}&quot;,&#xd;
            &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
            &quot;mcSequenceNumber&quot;: &quot;0&quot;,&#xd;
            &quot;merchant&quot;: {&#xd;
                &quot;merchant_number&quot;: &quot;242661000053360&quot;,&#xd;
                &quot;merchantId&quot;: &quot;#413101203250#33264#${AuthId}&quot;,&#xd;
                &quot;merchant_location&quot;: &quot;840&quot;,&#xd;
                &quot;mcc&quot;: &quot;5999&quot;,&#xd;
                &quot;description&quot;: &quot;SQ *CHAMOY EXPRESS Rancho CucamoCAUS&quot;&#xd;
            },&#xd;
            &quot;internalClearingId&quot;: &quot;#413101203250#33264#${AuthId}#VISA&quot;,&#xd;
            &quot;type&quot;: &quot;CREDIT&quot;,&#xd;
            &quot;interchangeFeeAmount&quot;: &quot;0.13&quot;,&#xd;
            &quot;transactionCodeType&quot;: &quot;VISA&quot;,&#xd;
            &quot;cardToken&quot;: &quot;${cardToken}&quot;,&#xd;
            &quot;network&quot;: &quot;VISA&quot;,&#xd;
            &quot;mcSequenceCount&quot;: &quot;0&quot;,&#xd;
            &quot;externalClearingId&quot;: &quot;#35608#VISA&quot;,&#xd;
            &quot;currency&quot;: &quot;USD&quot;,&#xd;
            &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
            &quot;internalAuthId&quot;: &quot;#413101203250#33264#35608&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;batchDate&quot;: &quot;2022-02-15T16:33:16.911Z&quot;,&#xd;
    &quot;batchIdentifier&quot;: &quot;postedtransactions_20220203.txt.gpg&quot;,&#xd;
    &quot;tenantIdentifier&quot;: &quot;${tenantId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller only International Cash Advance Transaction" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;InternationalATM&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthIdAM&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cash_Advance Auth International transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/creditcards/${cardToken}/authorization</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;authType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;internalId&quot;: &quot;#413101101234#10223#${AuthIdAM}&quot;,&#xd;
    &quot;externalAuthId&quot;: &quot;${AuthIdAM}&quot;,&#xd;
    &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
    &quot;externalCardId&quot;: &quot;413101101234&quot;,&#xd;
    &quot;gatewayToken&quot;: &quot;GALILEO&quot;,&#xd;
    &quot;transactionType&quot;: &quot;CASH_ADVANCE&quot;,&#xd;
    &quot;account&quot;: {&#xd;
        &quot;accountToken&quot;: &quot;413101101234&quot;,&#xd;
        &quot;cardToken&quot;: 10222&#xd;
    },&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;amount&quot;: ${amount},&#xd;
    &quot;amountDetails&quot;: {&#xd;
        &quot;cashBackAmount&quot;: 10,&#xd;
        &quot;exchangeRate&quot;: 61000000,&#xd;
        &quot;localCurrency&quot;: &quot;USD&quot;,&#xd;
        &quot;localCurrencyAmount&quot;: 18.39&#xd;
    },&#xd;
    &quot;isEcommerce&quot;: false,&#xd;
    &quot;transaction&quot;: {&#xd;
        &quot;entryType&quot;: &quot;EMV Fallback&quot;,&#xd;
        &quot;validationResults&quot;: {&#xd;
            &quot;aav&quot;: &quot;N&quot;,&#xd;
            &quot;arqc&quot;: &quot;N&quot;,&#xd;
            &quot;avsResult&quot;: &quot;B&quot;,&#xd;
            &quot;cvv1&quot;: &quot;Y&quot;,&#xd;
            &quot;cvv2&quot;: &quot;N&quot;,&#xd;
            &quot;cvv3&quot;: &quot;N&quot;,&#xd;
            &quot;offlinePin&quot;: &quot;N&quot;,&#xd;
            &quot;pin&quot;: &quot;Y&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;merchant&quot;: {&#xd;
        &quot;mcc&quot;: 5541,&#xd;
        &quot;merchantId&quot;: &quot;04400071712234 &quot;,&#xd;
        &quot;description&quot;: &quot;7-ELEVEN               SALT LAKE CIT  UT&quot;,&#xd;
        &quot;postalcode&quot;: &quot;84116-0000&quot;,&#xd;
        &quot;country&quot;: &quot;840&quot;&#xd;
    },&#xd;
    &quot;network&quot;: &quot;VISA&quot;,&#xd;
    &quot;expiryDate&quot;: &quot;2025-12-27&quot;,&#xd;
    &quot;returnBalance&quot;: false,&#xd;
    &quot;incremental&quot;: true,&#xd;
    &quot;international&quot;:true,&#xd;
    &quot;executionCode&quot;: &quot;00&quot;,&#xd;
    &quot;executionMessage&quot;: &quot;Accepted authorization&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cash_Advance International Settlement transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/settlements</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;settlementRequestEntries&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
            &quot;externalCardId&quot;: &quot;#413101203250#${AuthIdAM}&quot;,&#xd;
            &quot;externalAuthId&quot;: &quot;${AuthIdAM}&quot;,&#xd;
            &quot;mcSequenceNumber&quot;: &quot;0&quot;,&#xd;
            &quot;merchant&quot;: {&#xd;
                &quot;merchant_number&quot;: &quot;242661000053360&quot;,&#xd;
                &quot;merchantId&quot;: &quot;#413101203250#33264#${AuthIdAM}&quot;,&#xd;
                &quot;merchant_location&quot;: &quot;840&quot;,&#xd;
                &quot;mcc&quot;: &quot;6258&quot;,&#xd;
                &quot;description&quot;: &quot;SQ *CHAMOY EXPRESS Rancho CucamoCAUS&quot;&#xd;
            },&#xd;
            &quot;internalClearingId&quot;: &quot;#413101203250#33264#${AuthIdAM}#VISA&quot;,&#xd;
            &quot;type&quot;: &quot;DEBIT&quot;,   &#xd;
            &quot;interchangeFeeAmount&quot;: &quot;0.13&quot;,&#xd;
            &quot;transactionCodeType&quot;: &quot;VISA&quot;,&#xd;
            &quot;cardToken&quot;: &quot;${cardToken}&quot;,&#xd;
            &quot;network&quot;: &quot;VISA&quot;,&#xd;
            &quot;mcSequenceCount&quot;: &quot;0&quot;,&#xd;
            &quot;externalClearingId&quot;: &quot;#35608#VISA&quot;,&#xd;
            &quot;currency&quot;: &quot;USD&quot;,&#xd;
            &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
            &quot;international&quot;:true,&#xd;
            &quot;internalAuthId&quot;: &quot;#413101203250#33264#35608&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;batchDate&quot;: &quot;2022-02-15T16:33:16.911Z&quot;,&#xd;
    &quot;batchIdentifier&quot;: &quot;postedtransactions_20220203.txt.gpg&quot;,&#xd;
    &quot;tenantIdentifier&quot;:&quot;${tenantId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller DOMESTIC_ATM_WITHDRAWAL_FEE" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;DOMESTIC_ATM_WITHDRAWAL_FEE&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthId&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DOMESTIC_ATM_WITHDRAWAL_FEE transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/creditcards/${cardToken}/authorization</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;authType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;internalId&quot;: &quot;#413101101234#10223#${AuthId}&quot;,&#xd;
    &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
    &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
    &quot;externalCardId&quot;: &quot;413101101234&quot;,&#xd;
    &quot;gatewayToken&quot;: &quot;GALILEO&quot;,&#xd;
    &quot;transactionType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;account&quot;: {&#xd;
        &quot;accountToken&quot;: &quot;413101101234&quot;,&#xd;
        &quot;cardToken&quot;: 10222&#xd;
    },&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;amount&quot;: ${amount},&#xd;
    &quot;amountDetails&quot;: {&#xd;
        &quot;cashBackAmount&quot;: 10,&#xd;
        &quot;exchangeRate&quot;: 61000000,&#xd;
        &quot;localCurrency&quot;: &quot;USD&quot;,&#xd;
        &quot;localCurrencyAmount&quot;: 18.39&#xd;
    },&#xd;
    &quot;isEcommerce&quot;: false,&#xd;
    &quot;transaction&quot;: {&#xd;
        &quot;entryType&quot;: &quot;EMV Fallback&quot;,&#xd;
        &quot;validationResults&quot;: {&#xd;
            &quot;aav&quot;: &quot;N&quot;,&#xd;
            &quot;arqc&quot;: &quot;N&quot;,&#xd;
            &quot;avsResult&quot;: &quot;B&quot;,&#xd;
            &quot;cvv1&quot;: &quot;Y&quot;,&#xd;
            &quot;cvv2&quot;: &quot;N&quot;,&#xd;
            &quot;cvv3&quot;: &quot;N&quot;,&#xd;
            &quot;offlinePin&quot;: &quot;N&quot;,&#xd;
            &quot;pin&quot;: &quot;Y&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;merchant&quot;: {&#xd;
        &quot;mcc&quot;: 1212,&#xd;
        &quot;merchantId&quot;: &quot;04400071712234 &quot;,&#xd;
        &quot;description&quot;: &quot;7-ELEVEN               SALT LAKE CIT  UT&quot;,&#xd;
        &quot;postalcode&quot;: &quot;84116-0000&quot;,&#xd;
        &quot;country&quot;: &quot;840&quot;&#xd;
    },&#xd;
    &quot;network&quot;: &quot;VISA&quot;,&#xd;
    &quot;expiryDate&quot;: &quot;2025-12-27&quot;,&#xd;
    &quot;returnBalance&quot;: false,&#xd;
    &quot;incremental&quot;: false,&#xd;
    &quot;executionCode&quot;: &quot;00&quot;,&#xd;
    &quot;executionMessage&quot;: &quot;Accepted authorization&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DOMESTIC_ATM_WITHDRAWAL_FEE Settlement transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/settlements</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;settlementRequestEntries&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
            &quot;externalCardId&quot;: &quot;#413101203250#${AuthId}&quot;,&#xd;
            &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
            &quot;mcSequenceNumber&quot;: &quot;0&quot;,&#xd;
            &quot;merchant&quot;: {&#xd;
                &quot;merchant_number&quot;: &quot;242661000053360&quot;,&#xd;
                &quot;merchantId&quot;: &quot;#413101203250#33264#${AuthId}&quot;,&#xd;
                &quot;merchant_location&quot;: &quot;840&quot;,&#xd;
                &quot;mcc&quot;: &quot;5999&quot;,&#xd;
                &quot;description&quot;: &quot;SQ *CHAMOY EXPRESS Rancho CucamoCAUS&quot;&#xd;
            },&#xd;
            &quot;internalClearingId&quot;: &quot;#413101203250#33264#${AuthId}#VISA&quot;,&#xd;
            &quot;type&quot;: &quot;DEBIT&quot;,&#xd;
            &quot;interchangeFeeAmount&quot;: &quot;0.13&quot;,&#xd;
            &quot;transactionCodeType&quot;: &quot;DOMESTIC_ATM_WITHDRAWAL_FEE&quot;,&#xd;
            &quot;cardToken&quot;: &quot;${cardToken}&quot;,&#xd;
            &quot;network&quot;: &quot;VISA&quot;,&#xd;
            &quot;mcSequenceCount&quot;: &quot;0&quot;,&#xd;
            &quot;externalClearingId&quot;: &quot;#35608#VISA&quot;,&#xd;
            &quot;currency&quot;: &quot;USD&quot;,&#xd;
            &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
            &quot;internalAuthId&quot;: &quot;#413101203250#33264#35608&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;batchDate&quot;: &quot;2022-02-15T16:33:16.911Z&quot;,&#xd;
    &quot;batchIdentifier&quot;: &quot;postedtransactions_20220203.txt.gpg&quot;,&#xd;
    &quot;tenantIdentifier&quot;: &quot;${tenantId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for DIRECT_DEPOSIT_CASH_ADVANCE_transaction" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;DIRECT_DEPOSIT_CASH_ADVANCE&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthId&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DIRECT_DEPOSIT_CASH_ADVANCE_transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/creditcards/${internal_credit_card_id}?command=cashAdvance</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;currentAccountId&quot;:${internal_saving_account_id},&#xd;
    &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
    &quot;locale&quot;: &quot;en&quot;,&#xd;
    &quot;dateFormat&quot;: &quot;dd MMMM yyyy&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller INTERNATIONAL_ATM_WITHDRAWAL_FEE" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;INTERNATIONAL_ATM_WITHDRAWAL_FEE&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthId&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="INTERNATIONAL_ATM_WITHDRAWAL_FEE Auth transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/creditcards/${cardToken}/authorization</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;authType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;internalId&quot;: &quot;#413101101234#10223#${AuthId}&quot;,&#xd;
    &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
    &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
    &quot;externalCardId&quot;: &quot;413101101234&quot;,&#xd;
    &quot;gatewayToken&quot;: &quot;GALILEO&quot;,&#xd;
    &quot;transactionType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;account&quot;: {&#xd;
        &quot;accountToken&quot;: &quot;413101101234&quot;,&#xd;
        &quot;cardToken&quot;: 10222&#xd;
    },&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;amount&quot;: ${amount},&#xd;
    &quot;amountDetails&quot;: {&#xd;
        &quot;cashBackAmount&quot;: 10,&#xd;
        &quot;exchangeRate&quot;: 61000000,&#xd;
        &quot;localCurrency&quot;: &quot;USD&quot;,&#xd;
        &quot;localCurrencyAmount&quot;: 18.39&#xd;
    },&#xd;
    &quot;isEcommerce&quot;: false,&#xd;
    &quot;transaction&quot;: {&#xd;
        &quot;entryType&quot;: &quot;EMV Fallback&quot;,&#xd;
        &quot;validationResults&quot;: {&#xd;
            &quot;aav&quot;: &quot;N&quot;,&#xd;
            &quot;arqc&quot;: &quot;N&quot;,&#xd;
            &quot;avsResult&quot;: &quot;B&quot;,&#xd;
            &quot;cvv1&quot;: &quot;Y&quot;,&#xd;
            &quot;cvv2&quot;: &quot;N&quot;,&#xd;
            &quot;cvv3&quot;: &quot;N&quot;,&#xd;
            &quot;offlinePin&quot;: &quot;N&quot;,&#xd;
            &quot;pin&quot;: &quot;Y&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;merchant&quot;: {&#xd;
        &quot;mcc&quot;: 1212,&#xd;
        &quot;merchantId&quot;: &quot;04400071712234 &quot;,&#xd;
        &quot;description&quot;: &quot;7-ELEVEN               SALT LAKE CIT  UT&quot;,&#xd;
        &quot;postalcode&quot;: &quot;84116-0000&quot;,&#xd;
        &quot;country&quot;: &quot;840&quot;&#xd;
    },&#xd;
    &quot;network&quot;: &quot;VISA&quot;,&#xd;
    &quot;expiryDate&quot;: &quot;2025-12-27&quot;,&#xd;
    &quot;returnBalance&quot;: false,&#xd;
    &quot;incremental&quot;: false,&#xd;
    &quot;executionCode&quot;: &quot;00&quot;,&#xd;
    &quot;executionMessage&quot;: &quot;Accepted authorization&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="INTERNATIONAL_ATM_WITHDRAWAL_FEE Settlement transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/settlements</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;settlementRequestEntries&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
            &quot;externalCardId&quot;: &quot;#413101203250#${AuthId}&quot;,&#xd;
            &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
            &quot;mcSequenceNumber&quot;: &quot;0&quot;,&#xd;
            &quot;merchant&quot;: {&#xd;
                &quot;merchant_number&quot;: &quot;242661000053360&quot;,&#xd;
                &quot;merchantId&quot;: &quot;#413101203250#33264#${AuthId}&quot;,&#xd;
                &quot;merchant_location&quot;: &quot;840&quot;,&#xd;
                &quot;mcc&quot;: &quot;5999&quot;,&#xd;
                &quot;description&quot;: &quot;SQ *CHAMOY EXPRESS Rancho CucamoCAUS&quot;&#xd;
            },&#xd;
            &quot;internalClearingId&quot;: &quot;#413101203250#33264#${AuthId}#VISA&quot;,&#xd;
            &quot;type&quot;: &quot;DEBIT&quot;,&#xd;
            &quot;interchangeFeeAmount&quot;: &quot;0.13&quot;,&#xd;
            &quot;transactionCodeType&quot;: &quot;INTERNATIONAL_ATM_WITHDRAWAL_FEE&quot;,&#xd;
            &quot;cardToken&quot;: &quot;${cardToken}&quot;,&#xd;
            &quot;network&quot;: &quot;VISA&quot;,&#xd;
            &quot;mcSequenceCount&quot;: &quot;0&quot;,&#xd;
            &quot;externalClearingId&quot;: &quot;#35608#VISA&quot;,&#xd;
            &quot;currency&quot;: &quot;USD&quot;,&#xd;
            &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
            &quot;internalAuthId&quot;: &quot;#413101203250#33264#35608&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;batchDate&quot;: &quot;2022-02-15T16:33:16.911Z&quot;,&#xd;
    &quot;batchIdentifier&quot;: &quot;postedtransactions_20220203.txt.gpg&quot;,&#xd;
    &quot;tenantIdentifier&quot;: &quot;${tenantId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller PURCHASE_INTERNATIONAL_FEE" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;PURCHASE_INTERNATIONAL_FEE&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthId&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PURCHASE_INTERNATIONAL_FEE Auth transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/creditcards/${cardToken}/authorization</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;authType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;internalId&quot;: &quot;#413101101234#10223#${AuthId}&quot;,&#xd;
    &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
    &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
    &quot;externalCardId&quot;: &quot;413101101234&quot;,&#xd;
    &quot;gatewayToken&quot;: &quot;GALILEO&quot;,&#xd;
    &quot;transactionType&quot;: &quot;AUTH&quot;,&#xd;
    &quot;account&quot;: {&#xd;
        &quot;accountToken&quot;: &quot;413101101234&quot;,&#xd;
        &quot;cardToken&quot;: 10222&#xd;
    },&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;amount&quot;: ${amount},&#xd;
    &quot;amountDetails&quot;: {&#xd;
        &quot;cashBackAmount&quot;: 10,&#xd;
        &quot;exchangeRate&quot;: 61000000,&#xd;
        &quot;localCurrency&quot;: &quot;USD&quot;,&#xd;
        &quot;localCurrencyAmount&quot;: 18.39&#xd;
    },&#xd;
    &quot;isEcommerce&quot;: false,&#xd;
    &quot;transaction&quot;: {&#xd;
        &quot;entryType&quot;: &quot;EMV Fallback&quot;,&#xd;
        &quot;validationResults&quot;: {&#xd;
            &quot;aav&quot;: &quot;N&quot;,&#xd;
            &quot;arqc&quot;: &quot;N&quot;,&#xd;
            &quot;avsResult&quot;: &quot;B&quot;,&#xd;
            &quot;cvv1&quot;: &quot;Y&quot;,&#xd;
            &quot;cvv2&quot;: &quot;N&quot;,&#xd;
            &quot;cvv3&quot;: &quot;N&quot;,&#xd;
            &quot;offlinePin&quot;: &quot;N&quot;,&#xd;
            &quot;pin&quot;: &quot;Y&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;merchant&quot;: {&#xd;
        &quot;mcc&quot;: 1212,&#xd;
        &quot;merchantId&quot;: &quot;04400071712234 &quot;,&#xd;
        &quot;description&quot;: &quot;7-ELEVEN               SALT LAKE CIT  UT&quot;,&#xd;
        &quot;postalcode&quot;: &quot;84116-0000&quot;,&#xd;
        &quot;country&quot;: &quot;840&quot;&#xd;
    },&#xd;
    &quot;network&quot;: &quot;VISA&quot;,&#xd;
    &quot;expiryDate&quot;: &quot;2025-12-27&quot;,&#xd;
    &quot;returnBalance&quot;: false,&#xd;
    &quot;incremental&quot;: false,&#xd;
    &quot;executionCode&quot;: &quot;00&quot;,&#xd;
    &quot;executionMessage&quot;: &quot;Accepted authorization&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PURCHASE_INTERNATIONAL_FEE Settlement transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/settlements</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;settlementRequestEntries&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
            &quot;externalCardId&quot;: &quot;#413101203250#${AuthId}&quot;,&#xd;
            &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
            &quot;mcSequenceNumber&quot;: &quot;0&quot;,&#xd;
            &quot;merchant&quot;: {&#xd;
                &quot;merchant_number&quot;: &quot;242661000053360&quot;,&#xd;
                &quot;merchantId&quot;: &quot;#413101203250#33264#${AuthId}&quot;,&#xd;
                &quot;merchant_location&quot;: &quot;840&quot;,&#xd;
                &quot;mcc&quot;: &quot;5999&quot;,&#xd;
                &quot;description&quot;: &quot;SQ *CHAMOY EXPRESS Rancho CucamoCAUS&quot;&#xd;
            },&#xd;
            &quot;internalClearingId&quot;: &quot;#413101203250#33264#${AuthId}#VISA&quot;,&#xd;
            &quot;type&quot;: &quot;DEBIT&quot;,&#xd;
            &quot;interchangeFeeAmount&quot;: &quot;0.13&quot;,&#xd;
            &quot;transactionCodeType&quot;: &quot;PURCHASE_INTERNATIONAL_FEE&quot;,&#xd;
            &quot;cardToken&quot;: &quot;${cardToken}&quot;,&#xd;
            &quot;network&quot;: &quot;VISA&quot;,&#xd;
            &quot;mcSequenceCount&quot;: &quot;0&quot;,&#xd;
            &quot;externalClearingId&quot;: &quot;#35608#VISA&quot;,&#xd;
            &quot;currency&quot;: &quot;USD&quot;,&#xd;
            &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
            &quot;internalAuthId&quot;: &quot;#413101203250#33264#35608&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;batchDate&quot;: &quot;2022-02-15T16:33:16.911Z&quot;,&#xd;
    &quot;batchIdentifier&quot;: &quot;postedtransactions_20220203.txt.gpg&quot;,&#xd;
    &quot;tenantIdentifier&quot;: &quot;${tenantId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller to Update standing instructions" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${updateStandingInstructionType}&quot;==&quot;yes&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthId&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update standing instruction type Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/standinginstructions/${Standinginstruction_id}?command=update</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;priority&quot;: 2,&#xd;
  &quot;status&quot;: 1,&#xd;
  &quot;instructionType&quot;: &quot;${instructionType}&quot;,&#xd;
  &quot;validFrom&quot;: &quot;01 January 2020&quot;,&#xd;
  &quot;validTill&quot;: &quot;01 January 2035&quot;,&#xd;
  &quot;recurrenceType&quot;: 2,&#xd;
  //&quot;amount&quot;: &quot;100&quot;,&#xd;
  &quot;locale&quot;: &quot;en&quot;,&#xd;
  &quot;dateFormat&quot;: &quot;dd MMMM yyyy&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Refund" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;REFUND&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request to fetch the excess amount " enabled="true">
              <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">v1/creditcards/${internal_credit_card_id}?associations=account</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">excess_Amount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.unBilledAmount</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">${__setProperty(excess_Amount, ${excess_Amount})};
log.info(&quot;excess_Amount: &quot; + vars.get(&quot;excess_Amount&quot;));</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// Fetch the extracted value from the JSON Extractor
String excessAmount = vars.get(&quot;excess_Amount&quot;);

// Check if the value is not null or empty
if (excessAmount != null &amp;&amp; !excessAmount.isEmpty()) {
    // Convert to a positive number
    double positiveValue = Math.abs(Double.parseDouble(excessAmount));
    
    // Store the positive value back in a variable
    vars.put(&quot;positive_excess_Amount&quot;, String.valueOf(positiveValue));
    
    // Log the value for debugging
    log.info(&quot;positive_excess_Amount: &quot; + vars.get(&quot;positive_excess_Amount&quot;));
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request to make Refund" enabled="true">
              <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">v1/creditcards/${internal_credit_card_id}?command=refund</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;amount&quot;: &quot;${positive_excess_Amount}&quot;,&#xd;
  &quot;currentAccountId&quot;: ${internal_saving_account_id},&#xd;
  &quot;locale&quot;: &quot;en&quot;,&#xd;
  &quot;dateFormat&quot;: &quot;dd MMMM yyyy&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller only Purcahse Transaction" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${transaction}&quot;==&quot;settlementcredit&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor to generate AUTH id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">int randomNum = ${__Random(10000000,99999999)};
vars.put(&quot;AuthId&quot;, String.valueOf(randomNum));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purchase Settlement transaction Request" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/settlements</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;settlementRequestEntries&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
            &quot;externalCardId&quot;: &quot;#413101203250#${AuthId}&quot;,&#xd;
            &quot;externalAuthId&quot;: &quot;${AuthId}&quot;,&#xd;
            &quot;mcSequenceNumber&quot;: &quot;0&quot;,&#xd;
            &quot;merchant&quot;: {&#xd;
                &quot;merchant_number&quot;: &quot;242661000053360&quot;,&#xd;
                &quot;merchantId&quot;: &quot;#413101203250#33264#${AuthId}&quot;,&#xd;
                &quot;merchant_location&quot;: &quot;840&quot;,&#xd;
                &quot;mcc&quot;: &quot;5999&quot;,&#xd;
                &quot;description&quot;: &quot;SQ *CHAMOY EXPRESS Rancho CucamoCAUS&quot;&#xd;
            },&#xd;
            &quot;internalClearingId&quot;: &quot;#413101203250#33264#${AuthId}#VISA&quot;,&#xd;
            &quot;type&quot;: &quot;CREDIT&quot;,&#xd;
            &quot;interchangeFeeAmount&quot;: &quot;0.13&quot;,&#xd;
            &quot;transactionCodeType&quot;: &quot;VISA&quot;,&#xd;
            &quot;cardToken&quot;: &quot;${cardToken}&quot;,&#xd;
            &quot;network&quot;: &quot;VISA&quot;,&#xd;
            &quot;mcSequenceCount&quot;: &quot;0&quot;,&#xd;
            &quot;externalClearingId&quot;: &quot;#35608#VISA&quot;,&#xd;
            &quot;currency&quot;: &quot;USD&quot;,&#xd;
            &quot;externalOriginalAuthId&quot;: &quot;0&quot;,&#xd;
            &quot;internalAuthId&quot;: &quot;#413101203250#33264#35608&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;batchDate&quot;: &quot;2022-02-15T16:33:16.911Z&quot;,&#xd;
    &quot;batchIdentifier&quot;: &quot;postedtransactions_20220203.txt.gpg&quot;,&#xd;
    &quot;tenantIdentifier&quot;: &quot;${tenantId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Run Interest posting job" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${interestPosting}&quot;==&quot;yes&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate activate scheduler" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/scheduler?command=start</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate currentlyRunning of interest posting job" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/jobs/${InterestPostingJob}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">currentlyRunning</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.currentlyRunning</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;false&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate run interest posting to credit card schedular job " enabled="true">
              <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">v1/jobs/${InterestPostingJob}?command=executeJob</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;true&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3600</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate currentlyRunning of interest posting job" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/jobs/${InterestPostingJob}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">currentlyRunning</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.currentlyRunning</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
                <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;false&quot;)}</stringProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate run interest posting to credit card schedular job " enabled="true">
                  <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">v1/jobs/${InterestPostingJob}?command=executeJob</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                  <intProp name="ActionProcessor.action">5</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Run Autoipay  Reminder job" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${autopayReminder}&quot;==&quot;yes&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate activate scheduler" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/scheduler?command=start</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate currentlyRunning of Autopay Reminder Job" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/jobs/${AutopayReminderJob}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">currentlyRunning</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.currentlyRunning</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;false&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate run interest posting to credit card schedular job " enabled="true">
              <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">v1/jobs/${InterestPostingJob}?command=executeJob</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;true&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3600</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate currentlyRunning of interest posting job" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/jobs/${InterestPostingJob}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">currentlyRunning</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.currentlyRunning</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
                <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;false&quot;)}</stringProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate run interest posting to credit card schedular job " enabled="true">
                  <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">v1/jobs/${InterestPostingJob}?command=executeJob</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                  <intProp name="ActionProcessor.action">5</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Run Statement generation job" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${statementGeneration}&quot;==&quot;yes&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate activate scheduler" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/scheduler?command=start</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate currentlyRunning of statement generation job" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/jobs/${StatementGenerationJob}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">currentlyRunning</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.currentlyRunning</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;true&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3600</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate currentlyRunning of Statement Generation job" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/jobs/${StatementGenerationJob}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">currentlyRunning</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.currentlyRunning</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
                <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;false&quot;)}</stringProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate run statement generation to credit card schedular job " enabled="true">
                  <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">v1/jobs/${StatementGenerationJob}?command=executeJob</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                  <intProp name="ActionProcessor.action">5</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;false&quot; )}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate run statement generation to credit card schedular job " enabled="true">
              <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">v1/jobs/${StatementGenerationJob}?command=executeJob</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Run Execute Standing instructions job" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${Standinginstruction}&quot;==&quot;yes&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate activate scheduler" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/scheduler?command=start</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate currentlyRunning of Standinginstruction job" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/jobs/${StandinginstructionJob}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">currentlyRunning</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.currentlyRunning</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;true&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3600</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate currentlyRunning of Standinginstruction Job" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/jobs/${StandinginstructionJob}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">currentlyRunning</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.currentlyRunning</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
                <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;false&quot;)}</stringProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate run Standinginstruction Job to credit card schedular job " enabled="true">
                  <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">v1/jobs/${StandinginstructionJob}?command=executeJob</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                  <intProp name="ActionProcessor.action">5</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${currentlyRunning}&quot;==&quot;false&quot; )}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate run Standing instruction to credit card schedular job " enabled="true">
              <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">v1/jobs/${StandinginstructionJob}?command=executeJob</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller to make ach processing" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${AchProcessing}&quot;==&quot;yes&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller to verify if resource id exists" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${resourceId}&quot; != &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate AML screening result Id Request" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/amlscreeningresult</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="optionValue" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${resourceId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">optionValue</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">tenantid</stringProp>
                      <stringProp name="Header.value">${tenantId}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">AMLresultId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageItems[:1].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">totalFilteredRecords</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.totalFilteredRecords</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">${__setProperty(totalFilteredRecords, ${totalFilteredRecords})};
${__setProperty(AMLresultId, ${AMLresultId})};</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Transfer status Request" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.path">v1/transfers/${resourceId}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">${__setProperty(transfer_status, ${transfer_status})};</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">transfer_status</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${transfer_status}&quot;==&quot;EXECUTION_SUCCESS&quot; &amp;&amp; ${totalFilteredRecords} == 0)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                  <intProp name="ActionProcessor.action">5</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${transfer_status}&quot;==&quot;EXECUTION_SUCCESS&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                  <intProp name="ActionProcessor.action">5</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${transfer_status}&quot;==&quot;AML_SCREENING&quot; &amp;&amp; ${totalFilteredRecords} != 0)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate approve Transfer Request" enabled="true">
                  <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">v1/amlscreeningresult/${__property(AMLresultId)}?command=approve</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;reason&quot;:&quot;Approved!&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">tenantid</stringProp>
                        <stringProp name="Header.value">${tenantId}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                  <intProp name="ActionProcessor.action">5</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate ach processing" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/transfer/ach/processing</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].totalCount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">${__setProperty(totalCount, ${totalCount})};

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${totalCount}&quot;!==&quot;0&quot;)}</stringProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">5</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate ach processing" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/transfer/ach/processing</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].totalCount</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">${__setProperty(totalCount, ${totalCount})};

</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate currentlyRunning of ach processing Job" enabled="true">
                <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">v1/transfer/ach/processing</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">currentlyRunning</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.currentlyRunning</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
                <stringProp name="IfController.condition">${__groovy(&quot;${totalCount}&quot;==&quot;0&quot;)}</stringProp>
              </IfController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                  <intProp name="ActionProcessor.action">5</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller to make ach outgoing debit transfer as success" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__groovy(&quot;${markSuccess}&quot;==&quot;yes&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get externalid from transfer details request " enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/transfers?dateFormat=yyyy-MM-dd&amp;limit=1&amp;locale=en&amp;offset=0&amp;orderBy=id&amp;originatedBy=us&amp;paymentType=ACH&amp;sortOrder=DESC</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">externalId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageItems[*].externalId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">${__setProperty(externalId, ${externalId})};
log.info(&quot;Extracted externalId: &quot; + externalId)
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request to MARK Transfer as Success" enabled="true">
            <stringProp name="HTTPSampler.domain">${baseurl}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v1/external-transfers?command=MARK_AS_SUCCESS</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;externalId&quot;: &quot;${externalId}&quot;,&#xd;
    &quot;paymentType&quot; : &quot;ACH&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">internal_credit_card_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.resourceId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">${__setProperty(internal_credit_card_id, ${internal_credit_card_id})};


log.info(&quot;cardToken - ${cardToken}&quot;);

import org.apache.jmeter.assertions.AssertionResult;
import org.apache.jmeter.samplers.SampleResult;

// Get the response code
String responseCode = SampleResult.getResponseCode();

// Define the expected response code
String expectedResponseCode = &quot;200&quot;;

// Flag to track if the expected condition is met
boolean conditionMet = false;

// Verify the response code
if (responseCode.equals(expectedResponseCode)) {
	conditionMet = true;
    log.info(&quot;Credit Card account created successfully. Response code matches. Expected: &quot; + expectedResponseCode + &quot;, Actual: &quot; + responseCode);
    props.put(&quot;creditCardAccountCreation&quot;, &quot;successful&quot;);
    //log.info(&quot;${clientEnvironment}-NewDataCreationPassed&quot;);
}else{
	conditionMet = false;
     props.put(&quot;creditCardAccountCreation&quot;, &quot;unsuccessful&quot;);
     log.info(&quot;${clientEnvironment}-NewDataCreationFailed&quot;);
}

// Set the assertion result based on the condition
prev.setSuccessful(conditionMet);</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
